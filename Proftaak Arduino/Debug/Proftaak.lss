
Proftaak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b1d  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ae  00000000  00000000  00000e25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057f  00000000  00000000  000016d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00001c54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e6  00000000  00000000  00001de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000269  00000000  00000000  000022ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002533  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	39 c0       	rjmp	.+114    	; 0x78 <__bad_interrupt>
   6:	00 00       	nop
   8:	37 c0       	rjmp	.+110    	; 0x78 <__bad_interrupt>
   a:	00 00       	nop
   c:	35 c0       	rjmp	.+106    	; 0x78 <__bad_interrupt>
   e:	00 00       	nop
  10:	33 c0       	rjmp	.+102    	; 0x78 <__bad_interrupt>
  12:	00 00       	nop
  14:	31 c0       	rjmp	.+98     	; 0x78 <__bad_interrupt>
  16:	00 00       	nop
  18:	2f c0       	rjmp	.+94     	; 0x78 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2d c0       	rjmp	.+90     	; 0x78 <__bad_interrupt>
  1e:	00 00       	nop
  20:	2b c0       	rjmp	.+86     	; 0x78 <__bad_interrupt>
  22:	00 00       	nop
  24:	29 c0       	rjmp	.+82     	; 0x78 <__bad_interrupt>
  26:	00 00       	nop
  28:	27 c0       	rjmp	.+78     	; 0x78 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	25 c0       	rjmp	.+74     	; 0x78 <__bad_interrupt>
  2e:	00 00       	nop
  30:	23 c0       	rjmp	.+70     	; 0x78 <__bad_interrupt>
  32:	00 00       	nop
  34:	21 c0       	rjmp	.+66     	; 0x78 <__bad_interrupt>
  36:	00 00       	nop
  38:	1f c0       	rjmp	.+62     	; 0x78 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1d c0       	rjmp	.+58     	; 0x78 <__bad_interrupt>
  3e:	00 00       	nop
  40:	1b c0       	rjmp	.+54     	; 0x78 <__bad_interrupt>
  42:	00 00       	nop
  44:	19 c0       	rjmp	.+50     	; 0x78 <__bad_interrupt>
  46:	00 00       	nop
  48:	17 c0       	rjmp	.+46     	; 0x78 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	15 c0       	rjmp	.+42     	; 0x78 <__bad_interrupt>
  4e:	00 00       	nop
  50:	13 c0       	rjmp	.+38     	; 0x78 <__bad_interrupt>
  52:	00 00       	nop
  54:	11 c0       	rjmp	.+34     	; 0x78 <__bad_interrupt>
  56:	00 00       	nop
  58:	0f c0       	rjmp	.+30     	; 0x78 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	0d c0       	rjmp	.+26     	; 0x78 <__bad_interrupt>
  5e:	00 00       	nop
  60:	0b c0       	rjmp	.+22     	; 0x78 <__bad_interrupt>
  62:	00 00       	nop
  64:	09 c0       	rjmp	.+18     	; 0x78 <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	09 d0       	rcall	.+18     	; 0x88 <main>
  76:	77 c0       	rjmp	.+238    	; 0x166 <_exit>

00000078 <__bad_interrupt>:
  78:	c3 cf       	rjmp	.-122    	; 0x0 <__vectors>

0000007a <IsSyncBitSet>:
{
	PORTD |= (1 << 7);
}
void ClearAcknowledge() // Zet bit 7 (ACK-bit) op "0", zonder de andere bits in PORTD te wijzigen
{
	PORTD |= (0 << 7);
  7a:	83 b1       	in	r24, 0x03	; 3
  7c:	83 fb       	bst	r24, 3
  7e:	88 27       	eor	r24, r24
  80:	80 f9       	bld	r24, 0
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	89 27       	eor	r24, r25
  86:	08 95       	ret

00000088 <main>:
///////////////////////////////////////////////////////////////////////////////
// program entry point

int main(void)
{
	InitPorts();
  88:	14 d0       	rcall	.+40     	; 0xb2 <InitPorts>
	InitTimer();
  8a:	68 d0       	rcall	.+208    	; 0x15c <InitTimer>
  8c:	1b b8       	out	0x0b, r1	; 11
	
	PORTD = 0x00;	// all LED's off
  8e:	c0 e4       	ldi	r28, 0x40	; 64
// program defenitions
void SetSyncLed(bool ledOn) //af
{
	if (ledOn == true)
	{
		PORTD = (1 << 6);
  90:	0c c0       	rjmp	.+24     	; 0xaa <main+0x22>
  92:	cb b9       	out	0x0b, r28	; 11
  94:	64 e6       	ldi	r22, 0x64	; 100
		//ControlLamps(button_status);
		
		while (IsSyncBitSet() == true)
		{
			SetSyncLed(true);
			delayms(100);
  96:	70 e0       	ldi	r23, 0x00	; 0
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	43 d0       	rcall	.+134    	; 0x124 <delayms>
  9e:	1b b8       	out	0x0b, r1	; 11
	{
		PORTD = (1 << 6);
	}
	else
	{
		PORTD = (0 << 6);
  a0:	64 e6       	ldi	r22, 0x64	; 100
		while (IsSyncBitSet() == true)
		{
			SetSyncLed(true);
			delayms(100);
			SetSyncLed(false);
			delayms(100);
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	3d d0       	rcall	.+122    	; 0x124 <delayms>
	while (true)
	{
		//uint8_t button_status = PINB & 0x07;  // Lees de status van drukknoppen D2..D0 (bits 2..0 van poort B)
		//ControlLamps(button_status);
		
		while (IsSyncBitSet() == true)
  aa:	e7 df       	rcall	.-50     	; 0x7a <IsSyncBitSet>
  ac:	81 11       	cpse	r24, r1
  ae:	f1 cf       	rjmp	.-30     	; 0x92 <main+0xa>
  b0:	fc cf       	rjmp	.-8      	; 0xaa <main+0x22>

000000b2 <InitPorts>:
  b2:	8f ef       	ldi	r24, 0xFF	; 255
void InitPorts(void)
{
	//output: PORTD 7..0
	//input:  PINB  3..0

	DDRD = 0xFF;	// D: all outputs
  b4:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0x00;	// B: all inputs
  b6:	14 b8       	out	0x04, r1	; 4
  b8:	08 95       	ret

000000ba <timer0_Init>:
///////////////////////////////////////////////////////////////////////////////
// initialize timer 0. 

void timer0_Init(void)
{
    TIMSK0 = 0x00;
  ba:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCNT0  = 0;
  be:	16 bc       	out	0x26, r1	; 38
    TCCR0A = _BV(WGM01);  // select CTC mode, clock not started yet
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	84 bd       	out	0x24, r24	; 36
  c4:	08 95       	ret

000000c6 <timer0_Start>:

void timer0_Start(void)
{
	uint8_t clockSelect = _BV(CS01) ; // clock / 8

    TCCR0B |= clockSelect; 
  c6:	85 b5       	in	r24, 0x25	; 37
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	85 bd       	out	0x25, r24	; 37
  cc:	08 95       	ret

000000ce <timer0_Delay100us>:
// NB.: this is an experimental value and has been determined with the simulator.

void timer0_Delay100us(void)
{
	// define free running counter to start at zero!!
	TCNT0 = 0;
  ce:	16 bc       	out	0x26, r1	; 38

	// wait for Output Compare Flag 0
	while ( (TIFR0 & _BV(OCF0A)) == 0)
  d0:	a9 9b       	sbis	0x15, 1	; 21
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <timer0_Delay100us+0x2>
	{
	}

	// clear Output Compare Flag 0
	TIFR0 |= _BV(OCF0A);  
  d4:	a9 9a       	sbi	0x15, 1	; 21
  d6:	08 95       	ret

000000d8 <timer0_DelayN100us>:

///////////////////////////////////////////////////////////////////////////////
// delay N times 100 us

void timer0_DelayN100us(uint32_t number)
{
  d8:	8f 92       	push	r8
  da:	9f 92       	push	r9
  dc:	af 92       	push	r10
  de:	bf 92       	push	r11
  e0:	cf 92       	push	r12
  e2:	df 92       	push	r13
  e4:	ef 92       	push	r14
  e6:	ff 92       	push	r15
	uint32_t ix = 0;

	for (ix = 0; ix < number; ix++)
  e8:	61 15       	cp	r22, r1
  ea:	71 05       	cpc	r23, r1
  ec:	81 05       	cpc	r24, r1
  ee:	91 05       	cpc	r25, r1
  f0:	81 f0       	breq	.+32     	; 0x112 <timer0_DelayN100us+0x3a>
  f2:	4b 01       	movw	r8, r22
  f4:	5c 01       	movw	r10, r24
  f6:	c1 2c       	mov	r12, r1
  f8:	d1 2c       	mov	r13, r1
  fa:	76 01       	movw	r14, r12
	{
		timer0_Delay100us();
  fc:	e8 df       	rcall	.-48     	; 0xce <timer0_Delay100us>

void timer0_DelayN100us(uint32_t number)
{
	uint32_t ix = 0;

	for (ix = 0; ix < number; ix++)
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	c8 1a       	sub	r12, r24
 102:	d8 0a       	sbc	r13, r24
 104:	e8 0a       	sbc	r14, r24
 106:	f8 0a       	sbc	r15, r24
 108:	8c 14       	cp	r8, r12
 10a:	9d 04       	cpc	r9, r13
 10c:	ae 04       	cpc	r10, r14
 10e:	bf 04       	cpc	r11, r15
 110:	a9 f7       	brne	.-22     	; 0xfc <timer0_DelayN100us+0x24>
	{
		timer0_Delay100us();
	}
}
 112:	ff 90       	pop	r15
 114:	ef 90       	pop	r14
 116:	df 90       	pop	r13
 118:	cf 90       	pop	r12
 11a:	bf 90       	pop	r11
 11c:	af 90       	pop	r10
 11e:	9f 90       	pop	r9
 120:	8f 90       	pop	r8
 122:	08 95       	ret

00000124 <delayms>:
///////////////////////////////////////////////////////////////////////////////
// function for the user of the library: delays the specified number of
// milliseconds

void delayms(uint32_t milliSeconds)
{
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
	timer0_DelayN100us(10 * milliSeconds);
 128:	dc 01       	movw	r26, r24
 12a:	cb 01       	movw	r24, r22
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	aa 1f       	adc	r26, r26
 132:	bb 1f       	adc	r27, r27
 134:	8c 01       	movw	r16, r24
 136:	9d 01       	movw	r18, r26
 138:	00 0f       	add	r16, r16
 13a:	11 1f       	adc	r17, r17
 13c:	22 1f       	adc	r18, r18
 13e:	33 1f       	adc	r19, r19
 140:	00 0f       	add	r16, r16
 142:	11 1f       	adc	r17, r17
 144:	22 1f       	adc	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	bc 01       	movw	r22, r24
 14a:	cd 01       	movw	r24, r26
 14c:	60 0f       	add	r22, r16
 14e:	71 1f       	adc	r23, r17
 150:	82 1f       	adc	r24, r18
 152:	93 1f       	adc	r25, r19
 154:	c1 df       	rcall	.-126    	; 0xd8 <timer0_DelayN100us>
}
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <InitTimer>:


void InitTimer(void)
{
	timer0_Init();
 15c:	ae df       	rcall	.-164    	; 0xba <timer0_Init>
///////////////////////////////////////////////////////////////////////////////
// set timer compare value in OCR0

void timer0_SetCompareValue(uint8_t count)
{
    OCR0A = count; 
 15e:	8f eb       	ldi	r24, 0xBF	; 191

void InitTimer(void)
{
	timer0_Init();
	timer0_SetCompareValue(200 - OCR0_CALL_COMPENSATION);
	timer0_Start();	
 160:	87 bd       	out	0x27, r24	; 39
 162:	b1 cf       	rjmp	.-158    	; 0xc6 <timer0_Start>
 164:	08 95       	ret

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
